(define (search-for-primes start finish)
  (define (even? n)
      (= (remainder n 2) 0)
  )

  (define (divides? a b)
    (= (remainder b a) 0)
  )
    
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (next test-divisor)))
    )
  )

  (define (next n)
    (cond ((= n 2) 3)
          (else (+ n 2))
     )
  )

  (define (smallest-divisor n)
    (find-divisor n 2))
  
  (define (prime? n)
    (= n (smallest-divisor n)))

  (define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))
  
  (define (start-prime-test n start-time)
    (if (prime? n) (report-prime (- (runtime) start-time))))

  (define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (runtime))
  )

  (cond ((> start finish) (display "Finished"))
        ((even? start) (search-for-primes (+ start 1) finish))
        (else (timed-prime-test start) (search-for-primes (+ start 2) finish))
  )
)